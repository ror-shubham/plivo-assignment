{"version":3,"sources":["BirthdayCard.js","App.js","serviceWorker.js","index.js"],"names":["colorArray","Container","styled","div","props","css","squareSide","BirthdayCard","day","names","Math","ceil","sqrt","length","className","map","name","key","style","background","split","toUpperCase","checkValidJsonStr","str","JSON","parse","e","isJson","Array","isArray","every","it","hasOwnProperty","App","useState","birthdays","changeBirthdays","json","changeJson","isJsonValid","changeJsonValid","calYear","setCalYear","calYearTemp","setCalYearTemp","useEffect","isValidJsonStr","userArr","birthdaysDup","forEach","user","userBday","Date","birthday","setFullYear","getDay","push","ind","value","rows","cols","onChange","target","htmlFor","id","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7b2c40fb.chunk.js","sourcesContent":["import React from \"react\";\nimport styled, {css} from \"styled-components\";\n\nconst colorArray = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6',\n  '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\n  '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\n  '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\n  '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC',\n  '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\n  '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680',\n  '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\n  '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3',\n  '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\n\nconst Container = styled.div`\n    display: grid;\n    background: white;\n    width: 150px;\n    height: 150px;\n    grid-gap: 0;\n    ${props =>\n  css`\n      grid-template-columns: repeat(${props.squareSide}, auto);\n      grid-template-rows: repeat(${props.squareSide}, auto);\n    `};\n  `;\n\nfunction BirthdayCard({day, names}) {\n  const squareSide = names ? Math.ceil(Math.sqrt(names.length)): 1;\n  return(\n    <div>\n      <div className='birthday_card'>\n        <div className='birthday_header'>{day}</div>\n        <Container squareSide={squareSide}>\n          {names && names.map((name, key) => (\n            <div className=\"grid_child\" style={{background: colorArray[key]}} key={key}>\n              {name.split(\" \").length >= 2 ? `${name.split(\" \")[0][0].toUpperCase()}${name.split(\" \")[1][0].toUpperCase()}` : `${name[0].toUpperCase()}`}\n            </div>\n          ))}\n          {\n            !names && (\n              <div className=\"grid_child\" style={{background: '#444444'}}/>\n            )\n          }\n        </Container>\n      </div>\n      <div>\n        {names && names.length ? `${names.length} Birthday${names.length > 1 ? 's' : ''}`: 'No Birthdays'}\n      </div>\n    </div>\n  )\n}\n\nexport default BirthdayCard\n","import React, {useEffect, useState} from 'react';\n\nimport './App.css';\nimport BirthdayCard from \"./BirthdayCard\";\n\nfunction isJson(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n\nfunction checkValidJsonStr(str) {\n  return  isJson(str) && Array.isArray(JSON.parse(str)) && JSON.parse(str).every(it => it.hasOwnProperty('name') && it.hasOwnProperty('birthday'))\n}\n\nfunction App() {\n  const [birthdays, changeBirthdays] = useState({});\n  const [json, changeJson] = useState('[ { \"name\": \"John Smith\", \"birthday\": \"11/11/2007\" }, { \"name\": \"Joe Smith\", \"birthday\": \"10/11/2007\" }, { \"name\": \"Bob Smith\", \"birthday\": \"09/11/2007\" }, { \"name\": \"Mike Smith\", \"birthday\": \"09/11/2005\" }, { \"name\": \"Mike Carlos\", \"birthday\": \"09/11/2005\" }, { \"name\": \"Bob Smith\", \"birthday\": \"09/11/2005\" }, { \"name\": \"John Carlos\", \"birthday\": \"09/11/2005\" }, { \"name\": \"Mike K\", \"birthday\": \"09/11/2005\" }, { \"name\": \"Bob K\", \"birthday\": \"09/11/2005\" }, { \"name\": \"Alice K\", \"birthday\": \"09/11/2005\" }, { \"name\": \"JS PHP\", \"birthday\": \"09/06/2005\" }, { \"name\": \"Random Name\", \"birthday\": \"09/06/2005\" }, { \"name\": \"Name Random\", \"birthday\": \"09/06/2005\" } ]');\n  const [isJsonValid, changeJsonValid] = useState(true);\n  const [calYear, setCalYear] = useState('2007');\n  const [calYearTemp, setCalYearTemp] = useState('2007');\n  const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thr', 'Fri', 'Sat'];\n  useEffect(() => {\n    //check for validity of JSON, and save birthdays to state\n    const isValidJsonStr = checkValidJsonStr(json);\n    if (isValidJsonStr) {\n      const userArr = JSON.parse(json);\n      let birthdaysDup = {};\n      userArr.forEach(user => {\n        let userBday = new Date(user.birthday);\n        userBday.setFullYear(calYear);\n        let day = userBday.getDay();\n        if (birthdaysDup.hasOwnProperty(day)) birthdaysDup[day].push(user.name);\n        else birthdaysDup[day] = [user.name];\n      });\n      changeBirthdays({...birthdaysDup});\n    }\n    changeJsonValid(isValidJsonStr)\n  }, [json, calYear]);\n  return (\n    <div className=\"App\">\n      <h1>Work Area</h1>\n      <div className=\"cards\">{weekDays.map((day, ind) => {\n        return (<BirthdayCard key={ind} day={day} names={birthdays[ind]}/>)\n      })}</div>\n      <div className=\"input_parent\">\n        <div>\n          <textarea value={json} rows=\"25\" cols=\"75\" onChange={e => changeJson(e.target.value)}/>\n          {!isJsonValid && <div className=\"invalid\">Invalid Json</div>}\n        </div>\n        <div className='input_year'>\n          <label htmlFor=\"calyear\">Year</label>\n          <input id=\"calyear\" value={calYearTemp} onChange={e => setCalYearTemp(e.target.value)} type=\"text\"/>\n          <button onClick={() => setCalYear(calYearTemp)}>Update</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}